# Define parameters for a mu pipeline
# https://github.com/stelligent/mu/wiki/Pipelines

## See https://github.com/stelligent/mu/wiki/Environments
environments:
- name: test
  provider: ecs-fargate
  ### Attributes for the ECS container instances
  cluster:
    #### Name of EC2 keypair to associate with ECS container instances.
    #### Launches bastion host if defined.
    #### (default: none)
    # keyName: mu-wordpress

    #### The instance type to use for the ECS container instances
    #### (default: t2.micro)
    # instanceType: t2.micro
    ### Attributes for the ELB
    loadbalancer:
      # internal: true                # Whether to create an internal ELB or not (default: false)
      # hostedzone: mydomain.com      # HostedZone in Route53 to create ELB DNS for.  Leave blank to not create DNS (default: none)
      # name: api                     # Name to register in hostedzone for ELB DNS.  (default: environment name)
      # certificate: 973c1a2f-8d43... # The identifier of a certificate in ACM.  If defined, will create HTTPS listener in ELB.  (default: none)


- name: prod
  provider: ecs-fargate
#   cluster:
#     keyName: mu-wordpress
#     instanceType: t2.small

# templates:
#   mu-iam-service-mu-wordpress-test:
#     Resources:
#       ExtraPolicy:
#         Type: AWS::IAM::Policy
#         Properties: 
#           PolicyName: "example"
#           PolicyDocument: 
#             Version: "2012-10-17"
#             Statement: 
#               - 
#                 Effect: "Allow"
#                 Action: 
#                   - "s3:Get*"
#                   # - "s3:Put*"
#                 Resource: "*"
#           Roles: 
#             - 
#               "mu-service-mu-wordpress-test-task-eu-central-1"

  # mu-loadbalancer-test:
  #   Resources:
  #     # Define a new security group
  #     ElbSG:
  #       Type: AWS::EC2::SecurityGroup
  #       Properties:
  #         VpcId:
  #           Fn::ImportValue: 
  #             Fn::Sub: ${VpcId}
  #         GroupDescription: Example additional ECS Host Security Group
  #         SecurityGroupIngress:
  #         - IpProtocol: tcp
  #           FromPort: '80'
  #           ToPort: '80'
  #           CidrIp: 62.96.159.233/32
  #         - IpProtocol: tcp
  #           FromPort: '443'
  #           ToPort: '443'
  #           CidrIp: 62.96.159.233/32


## See https://github.com/stelligent/mu/wiki/Services
service:
  name: mu-wordpress

  ### The desired number of tasks to run for the service
  ### (default: 2)
  ### We can't let this be anything other than "1" without establishing
  ### a shared PHP session management solution
  desiredCount: 1

  ### The endpoint inside the container to determine if the task is healthy
  ### The default isn't going to be valid under WordPress
  ### (default: /health)
  healthEndpoint: /robots.txt

  ### The port to expose from the container
  ### (default: 8080)
  ### - The WordPress web service runs on port 80
  port: 80

  ### The paths to match on in the ALB and route to this service
  ### (default: None)
  ### - We want all traffic to be sent to the containers,
  ###   but perhaps we can send media requests elsewhere?
  pathPatterns:
  - /*
  # desiredCount: 4                    # The desired number of tasks to run for the service (default: 2)
  # dockerfile: ./Dockerfile           # The relative path to the Dockerfile to build images (default: ./Dockerfile)
  # imageRepository: tutum/hello-world # The repository to push images to and deploy services from.  Leave unset to have mu manage an ECR repository (default: none)
  # port: 80                           # The port to expose from the container (default: 8080)
  # protocol: HTTP                     # The protocol for the port exposed from the container (default: HTTP)
  # healthEndpoint: /health            # The endpoint inside the container to determine if the task is healthy (default: /health)
  # cpu: 20                            # The number of CPU units to allocate to each task (default: 10)
  # memory: 400                        # The amount of memory in MiB to allocate to each task (default: 300)
  # networkMode: bridge                # The networking mode for the task: none, bridge, host, or awsvpc (default: bridge)
  # targetCPUUtilization: 80           # The target CPU utilization for autoscaling (default: 75)
  # minSize: 1                         # The minimum number of services for autoscaling (default: 1)
  # maxSize: 2                         # The maximum number of services for autoscaling (default: 2)
  # deploymentStrategy: blue_green     # The strategy for deploying new images: blue_green, rolling, replace (default: blue_green)


  ### See https://github.com/stelligent/mu/wiki/Databases
  database:
    #### Name of database to create on RDS instance
    name: muwp

    #### RDS engine to use
    #### (default: aurora)
    #engine: mysql

    #### Instance class
    #### (default: db.t2.small)
    #instanceClass: db.t2.small

  ### Environment variables exposed to the containers running in ECS
  environment:
    WORDPRESS_DB_USER: ${DatabaseMasterUsername}
    WORDPRESS_DB_PASSWORD: ${DatabaseMasterPassword}
    WORDPRESS_DB_HOST: ${DatabaseEndpointAddress}:${DatabaseEndpointPort}
    WORDPRESS_DB_NAME: ${DatabaseName}

    #### Define this for each environment if you want WP_DEBUG=true
    #### in wp-config.php
    WORDPRESS_DEBUG:
      test: 'true'
      prod: 

  ### See https://github.com/stelligent/mu/wiki/Pipelines
  pipeline:
    muBaseurl: https://s3.eu-central-1.amazonaws.com/eu-central-1-mu-releases/linux_amd64/mu
    muVersion: ""
    source:
      #### GitHub or CodeCommit
      #### (default: GitHub)
      provider: GitHub

      #### The GitHub repo slug or CodeCommit repo name to build
      #### (default: none)
      repo: odise/mu-wordpress

    acceptance:
      #### The environment name to deploy to for testing
      #### (default: dev)
      environment: test
    production:
      #### The environment name to deploy to for production
      #### (default: production)
      environment: prod

# CFN code modifications
extensions:
  - url: extensions/app
  # - url: extensions/replacements